#pragma once
#include "Effect.h"

namespace HyEngine
{
	class MeshEffect : public Effect
	{
		//////////////////////////////////////////////////////////////////////////
		// CONSTRUCTOR & DESTRUCTOR
		//////////////////////////////////////////////////////////////////////////
	private :
		explicit MeshEffect(Scene* scene, int editID);
		explicit MeshEffect(Scene* scene);
		virtual ~MeshEffect();

		//////////////////////////////////////////////////////////////////////////
		// INHERITED
		//////////////////////////////////////////////////////////////////////////
	public :
		virtual void OnEnable() override;
		virtual void OnDisable() override;
		virtual void Update() override;
		virtual void Render() override;
		virtual void UpdatedData(EDataType dataType)override;


		//////////////////////////////////////////////////////////////////////////
		// INITIALIZER
		//////////////////////////////////////////////////////////////////////////
	private :
		void Initialize();



		//////////////////////////////////////////////////////////////////////////
		// VARIABLES
		//////////////////////////////////////////////////////////////////////////
	private :
		ID3DXMesh* m_pMesh = nullptr;
		IDirect3DTexture9 * m_pDiffuseMap = nullptr;
		IDirect3DTexture9 * m_pAlphaMask = nullptr;

	private : /* For mesh */
		std::wstring m_lastMeshPath;


		//////////////////////////////////////////////////////////////////////////
		// FACTORY METHOD
		//////////////////////////////////////////////////////////////////////////
	public :
		static MeshEffect* Create(Scene* scene);
		static MeshEffect* Create(Scene* scene, int editID);
	};
}

