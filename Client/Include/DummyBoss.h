#pragma once
#include "NamedEnemy.h"


class DummyBoss final : public NamedEnemy
{
	//////////////////////////////////////////////////////////////////////////
	// CONSTRUCTOR & DESTRUCTOR
	//////////////////////////////////////////////////////////////////////////
private :
	explicit DummyBoss(Scene * pScene, NavMesh* pNavMesh);
	virtual ~DummyBoss();

	//////////////////////////////////////////////////////////////////////////
	// INHERITED
	//////////////////////////////////////////////////////////////////////////
	virtual void Initialize(std::wstring dataPath) override;
	virtual void Update() override;
	virtual UINT GetTargetLayer() override;
	virtual void OnCollision(Collider* other) override;
	virtual int GetAttackCount() override;
	virtual Collider * GetAttackCollider(int attackIndex) override;
	virtual void OnHitOthers(Collider* other) override;

	//////////////////////////////////////////////////////////////////////////
	// PUBLIC METHOD
	//////////////////////////////////////////////////////////////////////////
public : /* For FSM */
	StateController<DummyBoss> * GetState() { return &m_state; }


	//////////////////////////////////////////////////////////////////////////
	// VARIABLES
	//////////////////////////////////////////////////////////////////////////
private : /* For FSM */
	StateController<DummyBoss> m_state;

	//////////////////////////////////////////////////////////////////////////
	// FACTORY METHOD
	//////////////////////////////////////////////////////////////////////////
public :
	static DummyBoss* Create(Scene* pScene, NavMesh* pNavMesh, std::wstring dataPath);


	// Inherited via NamedEnemy
	virtual float GetFocusColliderSize() override;

	virtual D3DXVECTOR3 GetFocusUIOffset() override;

};

