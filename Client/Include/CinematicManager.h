#pragma once



struct CinematicDesc
{
public:
	/* false 반환하면 시네마틱 종료 */
	std::function<bool()> onUpdate;

};
class CinematicTrack;
class CinematicManager
{
	//////////////////////////////////////////////////////////////////////////
	// CONSTRUCTOR & DESTRUCTOR
	//////////////////////////////////////////////////////////////////////////
public :
	CinematicManager(class GameScene* pScene);
	~CinematicManager();

	//////////////////////////////////////////////////////////////////////////
	// CALLBACK
	//////////////////////////////////////////////////////////////////////////



	//////////////////////////////////////////////////////////////////////////
	// PUBLIC METHOD
	//////////////////////////////////////////////////////////////////////////
public :
	void Initialize();
	void Update();

public : /* For Cinematics */
	void AddCinematic(std::wstring key,  CinematicTrack* pCinematicTrack);
	void PlayCinematic(std::wstring key);
	bool IsCinematic();


	//////////////////////////////////////////////////////////////////////////
	// VARIABLES
	//////////////////////////////////////////////////////////////////////////
private:
	class GameScene* m_pScene = nullptr;

private : /* For Cinematic */
	std::unordered_map<std::wstring, CinematicTrack*> m_cinematics;
	CinematicTrack* m_pCurrentTrack = nullptr;
	bool m_isPlayCinematic = false;
};

