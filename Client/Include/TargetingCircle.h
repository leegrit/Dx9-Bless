#pragma once
#include "Billboard.h"

using namespace HyEngine;


class TargetingCircle : public Billboard
{
	//////////////////////////////////////////////////////////////////////////
	// CONSTRUCTOR & DESTRUCTOR
	//////////////////////////////////////////////////////////////////////////
protected :
	explicit TargetingCircle(Scene* pScene, std::wstring name);
	virtual ~TargetingCircle();

	//////////////////////////////////////////////////////////////////////////
	// INHERITED
	//////////////////////////////////////////////////////////////////////////
public :
	virtual void Initialize() override;
	virtual void Render() override;
	virtual void Update() override;




	//////////////////////////////////////////////////////////////////////////
	// PUBLIC 
	//////////////////////////////////////////////////////////////////////////
public :
	void Focus(GameObject* pTarget, D3DXVECTOR3 focusOffset);
	void LostFocus();

	//////////////////////////////////////////////////////////////////////////
	// PRIVATE METHOD
	//////////////////////////////////////////////////////////////////////////
private:
	// 타겟이 잡히고 해당 ui가 해당 타겟위치로 이동할때
	void OnFocused();
	// 아무 타겟이 잡히지않을때 밝기가 조금 옅어진다.
	void OnLostFocused();


	//////////////////////////////////////////////////////////////////////////
	// VARIABLES
	//////////////////////////////////////////////////////////////////////////
private : /* For Render */
	IDirect3DTexture9* m_pTexture = nullptr;

private : /* For Focus */
	GameObject* m_pTarget = nullptr;
	D3DXVECTOR3 m_focusOffset;
	//////////////////////////////////////////////////////////////////////////
	// FACTORY METHOD
	//////////////////////////////////////////////////////////////////////////
public :
	static TargetingCircle* Create(Scene* pScene, std::wstring name);
};

