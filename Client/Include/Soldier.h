#pragma once
// юс╫ц╥н enemy
#include "Enemy.h"

class Soldier : public Enemy
{
	//////////////////////////////////////////////////////////////////////////
	// CONSTRUCTOR & DESTRUCTOR
	//////////////////////////////////////////////////////////////////////////
private :
	explicit Soldier(Scene* pScene, NavMesh* pNavMesh);
	virtual ~Soldier();

	//////////////////////////////////////////////////////////////////////////
	// INHERITED
	//////////////////////////////////////////////////////////////////////////
public:
	virtual void Initialize(std::wstring dataPath) override;
	virtual void Update() override;
	virtual void Render() override;
	virtual void OnDied() override;
	virtual UINT GetTargetLayer() override;
	virtual void OnCollision(Collider* other) override;
	virtual int GetAttackCount() override;
	virtual Collider * GetAttackCollider(int attackIndex) override;
	virtual float GetFocusColliderSize() override;
	virtual D3DXVECTOR3 GetFocusUIOffset() override;
	virtual int GetLevel() override;
	virtual std::wstring GetCharacterName() override;

	//////////////////////////////////////////////////////////////////////////
	// CALLBACK
	//////////////////////////////////////////////////////////////////////////
public:
	void OnHitOthers(Collider* other);


	//////////////////////////////////////////////////////////////////////////
	// PUBLIC METHOD
	//////////////////////////////////////////////////////////////////////////
public:
	StateController<Soldier>* GetState();


	//////////////////////////////////////////////////////////////////////////
	// VARIABLES
	//////////////////////////////////////////////////////////////////////////
private:
	/* For FSM */
	StateController<Soldier> m_state;

	/* For NormalAttack */
	Collider* m_pAttackCollider = nullptr;
	D3DXVECTOR3 m_colliderOffset;

	/* For Font */
	class NameFont * m_pNameFont = nullptr;

	float m_exp = 30;

	//////////////////////////////////////////////////////////////////////////
	// FACTORY METHOD
	//////////////////////////////////////////////////////////////////////////
public:
	static Soldier * Create(Scene * pScene, NavMesh* pNavMesh, std::wstring dataPath);


};

