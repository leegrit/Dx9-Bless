#pragma once
#include "Billboard.h"

using namespace HyEngine;
class TargetingArrow : public Billboard
{
	//////////////////////////////////////////////////////////////////////////
	// CONSTRUCTOR & DESTRUCTOR
	//////////////////////////////////////////////////////////////////////////
protected :
	explicit TargetingArrow(Scene* pScene, std::wstring name);
	virtual ~TargetingArrow();

	//////////////////////////////////////////////////////////////////////////
	// INHERITED
	//////////////////////////////////////////////////////////////////////////
public :
	virtual void Initialize() override;
	virtual void Render() override;
	virtual void Update() override;


	//////////////////////////////////////////////////////////////////////////
	// PUBLIC 
	//////////////////////////////////////////////////////////////////////////
public:
	void Focus(GameObject* pTarget, D3DXVECTOR3 focusOffset);
	void LostFocus();

	//////////////////////////////////////////////////////////////////////////
	// PRIVATE METHOD
	//////////////////////////////////////////////////////////////////////////
private:
	// 타겟이 잡히고 해당 ui가 해당 타겟위치로 이동할때
	void OnFocused();
	// 아무 타겟이 잡히지않을때 밝기가 조금 옅어진다.
	void OnLostFocused();

	//////////////////////////////////////////////////////////////////////////
	// VARIABLES
	//////////////////////////////////////////////////////////////////////////
private: /* For Render */
	IDirect3DTexture9* m_pTexture = nullptr;

private: /* For Focus */
	GameObject* m_pTarget = nullptr;
	D3DXVECTOR3 m_focusOffset;
	bool m_bFocused = false;
private :/* For Focus Change Event */
	D3DXVECTOR3 m_originScale = D3DXVECTOR3(8, 8, 8);
	// 포커스가 막 변경되었을 때 크기
	D3DXVECTOR3 m_focusChangeScale = D3DXVECTOR3(16, 16, 16);
	
	float m_changeEventSpeed = 3;
	float m_changeEventFactor = 0;

private : /* Focus Lost Event */
	float m_lostAlpha = 0.0f;
	float m_elapsed = 0;
	float m_lostTime = 0.2f;

	float m_currentAlpha = 1;
	//////////////////////////////////////////////////////////////////////////
	// FACTORY METHOD
	//////////////////////////////////////////////////////////////////////////
public:
	static TargetingArrow* Create(Scene* pScene, std::wstring name);
};

