#pragma once
#include "UIElement.h"

namespace HyEngine
{
	class MouseQuad;
}
using namespace HyEngine;
class MouseCursorUI : public UIElement
{
	//////////////////////////////////////////////////////////////////////////
	// CONSTRUCTOR & DESTRUCTOR
	//////////////////////////////////////////////////////////////////////////
protected :
	explicit MouseCursorUI(Scene* pScene);
	virtual ~MouseCursorUI();

	//////////////////////////////////////////////////////////////////////////
	// INHERITED
	//////////////////////////////////////////////////////////////////////////
public:
	virtual void Initialize(std::wstring imageFilePath, D3DXVECTOR3 position, D3DXVECTOR3 rotation, D3DXVECTOR3 scale);
	virtual void Render() override;
	virtual void Update() override;
	

	//////////////////////////////////////////////////////////////////////////
	// VARIABLES
	//////////////////////////////////////////////////////////////////////////
private :
	ID3DXEffect* m_pEffect = nullptr;
	MouseQuad * m_pTextureQuad = nullptr;
	IDirect3DTexture9* m_pTexture = nullptr;

	//////////////////////////////////////////////////////////////////////////
	// FACTORY METHOD
	//////////////////////////////////////////////////////////////////////////
public:
	static MouseCursorUI* Create(Scene * scene, std::wstring imageFilePath, D3DXVECTOR3 position, D3DXVECTOR3 rotation, D3DXVECTOR3 scale);

};

