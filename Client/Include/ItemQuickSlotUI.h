#pragma once
#include "GameObject.h"

namespace HyEngine
{
	class Button;
}

using namespace HyEngine;
class ItemQuickSlotUI : public GameObject
{
	//////////////////////////////////////////////////////////////////////////
	// CONSTRUCTOR & DESTRUCTOR
	//////////////////////////////////////////////////////////////////////////
protected:
	explicit ItemQuickSlotUI(Scene* pScene);
	virtual ~ItemQuickSlotUI();

	//////////////////////////////////////////////////////////////////////////
	// INHERITED
	//////////////////////////////////////////////////////////////////////////
public:
	virtual void Initialize();
	virtual void Update() override;
	virtual void Render() override;

	//////////////////////////////////////////////////////////////////////////
	// CALLBACK
	//////////////////////////////////////////////////////////////////////////
public:
	void OnSetQuickSlot(void*);
	void OnRemoveQuickSlot(void*);


	//////////////////////////////////////////////////////////////////////////
	// PUBLIC METHOD
	//////////////////////////////////////////////////////////////////////////
public:
	void Show();
	void Hide();
	bool IsShow();

	//////////////////////////////////////////////////////////////////////////
	// VARIABLE
	//////////////////////////////////////////////////////////////////////////
private: /* For Render */
	std::vector<Button*> m_slotButtons;
	std::vector<UIPanel* > m_itemIcons;

private:
	const int m_maxSlotHorizontal = 7;
	const float m_slotXPoses[7] =
	{
		-358 + 38 * 0,
		-358 + 38 * 1,
		-358 + 38 * 2,
		-358 + 38 * 3,
		-187 + 38 * 0,
		-187 + 38 * 1,
		-187 + 38 * 2
	};
	const float m_slotYPos = -277;

	bool m_bShow = false;

	class QuickSlotData * m_pQuickSlotData = nullptr;
	class InventoryData * m_pInventoryData = nullptr;

	//////////////////////////////////////////////////////////////////////////
	// FACTORY METHOD
	//////////////////////////////////////////////////////////////////////////
public:
	static ItemQuickSlotUI* Create(Scene * pScene);
};

