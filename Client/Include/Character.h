#pragma once
#include "Pawn.h"

using namespace HyEngine;


class Character abstract : public Pawn
{
	//////////////////////////////////////////////////////////////////////////
	// CONSTRUCTOR & DESTRUCTOR
	//////////////////////////////////////////////////////////////////////////
protected:
	explicit Character(Scene* scene, NavMesh* pNavMesh, D3DXVECTOR3 colPosOffest, float colRadius);
	virtual ~Character();

	//////////////////////////////////////////////////////////////////////////
	// INHERITED
	//////////////////////////////////////////////////////////////////////////
public:
	virtual void Initialize(std::wstring dataPath) override;
	virtual void Update() override;


	//////////////////////////////////////////////////////////////////////////
	// GETTER
	//////////////////////////////////////////////////////////////////////////
public:
	bool IsHit() const { return m_isHit; }
	/* For Status */
	float GetMoveSpeed() const;
	float GetMaxHP() const;
	float GetCurHP() const;
	float GetMaxMP() const;
	float GetCurMP() const;

	//////////////////////////////////////////////////////////////////////////
	// SETTER
	//////////////////////////////////////////////////////////////////////////
public :
	void SetParams(float moveSpd, float maxHP, float maxMP);



	//////////////////////////////////////////////////////////////////////////
	// PURE
	//////////////////////////////////////////////////////////////////////////
public :
	virtual UINT GetTargetLayer();
	virtual void OnCollision(Collider* other) PURE;

	//////////////////////////////////////////////////////////////////////////
	// VARIABLES
	//////////////////////////////////////////////////////////////////////////
private :
	Collider* m_pCollider;
	bool m_isHit = false;

	/* Status */
	float m_moveSpeed;
	float m_maxHP;
	float m_curHP;
	float m_maxMP;
	float m_curMP;
	
};

