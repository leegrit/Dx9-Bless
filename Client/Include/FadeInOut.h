#pragma once
#include "UIElement.h"

using namespace HyEngine;

class FadeInOut : public UIElement
{
	//////////////////////////////////////////////////////////////////////////
	// CONSTRUCTOR & DESTRUCTOR
	//////////////////////////////////////////////////////////////////////////
protected :
	explicit FadeInOut(Scene* pScene);
	virtual ~FadeInOut();
	
	//////////////////////////////////////////////////////////////////////////
	// INHERITED
	//////////////////////////////////////////////////////////////////////////
public :
	virtual void Initialize() override;
	virtual void Render() override;
	virtual void Update() override;

	//////////////////////////////////////////////////////////////////////////
	// PUBLIC METHOD
	//////////////////////////////////////////////////////////////////////////
public :
	void FadeIn(std::function<void()> onFadeInCompleted, float speed = 1);
	void FadeOut(std::function<void()> onFadeOutCompleted, float speed = 1);
	float GetAlpha() const;

	//////////////////////////////////////////////////////////////////////////
	// VARIABLES
	//////////////////////////////////////////////////////////////////////////
private : /* For Render */
	ID3DXEffect* m_pEffect = nullptr;
	class TextureQuad * m_pTextureQuad = nullptr;

private :
	bool m_isFadeIn = false;
	float m_currentAlpha;
	std::function<void()> m_fadeInCompleted;
	std::function<void()> m_fadeOutCompleted;
	float m_speed;



	//////////////////////////////////////////////////////////////////////////
	// FACTORY METHOD
	//////////////////////////////////////////////////////////////////////////
public :
	static FadeInOut* Create(Scene* pScene);

};

