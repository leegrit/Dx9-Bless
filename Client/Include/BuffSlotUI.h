#pragma once
#include "GameObject.h"

class SkillProgressUI;
using namespace HyEngine;
class BuffSlotUI : public GameObject
{
	//////////////////////////////////////////////////////////////////////////
	// CONSTRUCTOR & DESTRUCTOR
	//////////////////////////////////////////////////////////////////////////
protected :
	explicit BuffSlotUI(Scene* pScene);
	virtual ~BuffSlotUI();

	//////////////////////////////////////////////////////////////////////////
	// INHERITED
	//////////////////////////////////////////////////////////////////////////
public:
	virtual void Initialize();
	virtual void Update() override;
	virtual void Render() override;

	//////////////////////////////////////////////////////////////////////////
	// CALLBACK
	//////////////////////////////////////////////////////////////////////////
public:
	void OnBeginBuff(void* pBuffDesc);
	void OnEndBuff(void* pBuffDesc);

	//////////////////////////////////////////////////////////////////////////
	// PUBLIC METHOD
	//////////////////////////////////////////////////////////////////////////
public:
	void Show();
	void Hide();
	bool IsShow();

	//////////////////////////////////////////////////////////////////////////
	// VARIABLES
	//////////////////////////////////////////////////////////////////////////
private :
	std::vector<UIPanel*> m_buffIcons;
	std::vector<SkillProgressUI*> m_progressUI;

private :
	const int m_maxSlotHorizontal = 7;

	const float m_slotXPoses[7]=
	{
		108 + 32 * 0,
		108 + 32 * 1,
		108 + 32 * 2,
		108 + 32 * 3,
		108 + 32 * 4,
		108 + 32 * 5,
		108 + 32 * 6
	};
	const float m_slotYPos = -280;
	// scale = 25

	bool m_bShow = false;


	class PlayerBuffInfo * m_pPlayerBuffInfo = nullptr;

	//////////////////////////////////////////////////////////////////////////
	// FACTORY METHOD
	//////////////////////////////////////////////////////////////////////////
public :
	static BuffSlotUI * Create(Scene* pScene);
};

