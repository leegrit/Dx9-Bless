#pragma once
#include "Character.h"

class Skeletone : public Character
{
	//////////////////////////////////////////////////////////////////////////
	// CONSTRUCTOR & DESTRUCTOR
	//////////////////////////////////////////////////////////////////////////
private :
	explicit Skeletone(Scene* pScene, NavMesh* pNavMesh);
	virtual ~Skeletone();

	//////////////////////////////////////////////////////////////////////////
	// INHERTIED
	//////////////////////////////////////////////////////////////////////////
public :
	virtual void Initialize(std::wstring dataPath) override;
	virtual void Update() override;
	virtual UINT GetTargetLayer() override;
	virtual void OnCollision(Collider* other) override;

	//////////////////////////////////////////////////////////////////////////
	// PUBLIC METHOD
	//////////////////////////////////////////////////////////////////////////
public :
	StateController<Skeletone>* GetState() { return &m_state; }



	//////////////////////////////////////////////////////////////////////////
	// VARIABLES
	//////////////////////////////////////////////////////////////////////////
private :
	/* For FSM */
	StateController<Skeletone> m_state;

	//////////////////////////////////////////////////////////////////////////
	// FACTORY METHOD
	//////////////////////////////////////////////////////////////////////////
public :
	static Skeletone * Create(Scene * pScene, NavMesh* pNavMesh, std::wstring dataPath);

};

